
* Things that I believe should be done before 1.0 release
** DONE [#A] true k-d with special workarounds for 2d and 3d          :0.7.0:
** index/1 should return spent time or traversed branches             :0.6.0:
   - Note taken on [2014-04-29 Tue 15:22] \\
     not needed I believe. After some investigation I came to
     conclusion that if it will be really needed - it will be easier
     to implement on the hi-level, I mean time measure. This is the
     case when the process of indexing is taking a lot of time and
     such a measurement is consuming comparatively small amount of cpu
     time when compared to the indexing process itself. And when we're
     talking about the amount of branches traversed this will reduce
     the time to build a tree. When it comes to really significant
     amounts of data (I mean millions of points) this measurement is
     sensitive enough in means of consumed time.
   - Note taken on [2014-02-05 Wed 14:38] \\
     not sure if it needed or not
** TODO search/3 should be able to return more than 1 nearest point
** TODO add/2 should reallocate memory and not to copy old data
** TODO insert/2 should be more outsmart to really insert, not just add and reindex
** TODO remove/2 should remove specified nodes by ids from given tree
** DONE compare/2 to compare two trees by its contents                :0.6.0:
** TODO usage examples
** TODO augment and then refine documentation
* Optional features
** TODO alternative memory managing (GC off, explicit clear/1, configurable)
** TODO application + gen_server with stored treerefs in state
** TODO possibility to load/1 and index/1 in background
* Rationale
** empty tree object creation
  - Note taken on [2014-10-14 вт 16:17] \\
    suppose we create an empty tree. We can initialize it with
    dimension=0. This means that later in any possible operation with this
    tree object we should take special care about this situation when
    dimension is still unknown. This affects: add/2, insert/2, (need to
    inspect first cell?), store/2, index/1 (simple cases: nothing to
    index/store), root/1, node/2, gettree/1 (just special case to return
    empty list or proper error description), is_ready/1, compare/2 (can be
    left intact), search/2, search/3 can be left intact since is_ready=0.
    So, the actual complexity will go to add/2 and insert/2, and it can
    share some code. But it also means that any atomic add operation will
    take longer? Just for one operation of comparison, is dimension eq 0
    then special treatment is applied. So, what we actually need to do
    is to make universal fun for inspecting the first cell of a list
    and initialize the object.
